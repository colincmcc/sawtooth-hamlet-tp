// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Holding {
    // message fields
    pub id: ::protobuf::Chars,
    pub label: ::protobuf::Chars,
    pub description: ::protobuf::Chars,
    pub account: ::protobuf::Chars,
    pub asset: ::protobuf::Chars,
    pub quantity: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl Holding {
    pub fn new() -> Holding {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::Chars) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::protobuf::Chars {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.id, ::protobuf::Chars::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string label = 2;

    pub fn clear_label(&mut self) {
        ::protobuf::Clear::clear(&mut self.label);
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::Chars) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::protobuf::Chars {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.label, ::protobuf::Chars::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 3;

    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string account = 4;

    pub fn clear_account(&mut self) {
        ::protobuf::Clear::clear(&mut self.account);
    }

    // Param is passed by value, moved
    pub fn set_account(&mut self, v: ::protobuf::Chars) {
        self.account = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_account(&mut self) -> &mut ::protobuf::Chars {
        &mut self.account
    }

    // Take field
    pub fn take_account(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.account, ::protobuf::Chars::new())
    }

    pub fn get_account(&self) -> &str {
        &self.account
    }

    // string asset = 5;

    pub fn clear_asset(&mut self) {
        ::protobuf::Clear::clear(&mut self.asset);
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: ::protobuf::Chars) {
        self.asset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset(&mut self) -> &mut ::protobuf::Chars {
        &mut self.asset
    }

    // Take field
    pub fn take_asset(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.asset, ::protobuf::Chars::new())
    }

    pub fn get_asset(&self) -> &str {
        &self.asset
    }

    // sint64 quantity = 6;

    pub fn clear_quantity(&mut self) {
        self.quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: i64) {
        self.quantity = v;
    }

    pub fn get_quantity(&self) -> i64 {
        self.quantity
    }
}

impl ::protobuf::Message for Holding {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.account)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.asset)?;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.quantity = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.account.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.account);
        }
        if !self.asset.is_empty() {
            my_size += ::protobuf::rt::string_size(5, &self.asset);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(6, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.account.is_empty() {
            os.write_string(4, &self.account)?;
        }
        if !self.asset.is_empty() {
            os.write_string(5, &self.asset)?;
        }
        if self.quantity != 0 {
            os.write_sint64(6, self.quantity)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Holding {
        Holding::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "id",
                    |m: &Holding| { &m.id },
                    |m: &mut Holding| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "label",
                    |m: &Holding| { &m.label },
                    |m: &mut Holding| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &Holding| { &m.description },
                    |m: &mut Holding| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "account",
                    |m: &Holding| { &m.account },
                    |m: &mut Holding| { &mut m.account },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "asset",
                    |m: &Holding| { &m.asset },
                    |m: &mut Holding| { &mut m.asset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "quantity",
                    |m: &Holding| { &m.quantity },
                    |m: &mut Holding| { &mut m.quantity },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Holding>(
                    "Holding",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Holding {
        static mut instance: ::protobuf::lazy::Lazy<Holding> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Holding,
        };
        unsafe {
            instance.get(Holding::new)
        }
    }
}

impl ::protobuf::Clear for Holding {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_description();
        self.clear_account();
        self.clear_asset();
        self.clear_quantity();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Holding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Holding {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HoldingContainer {
    // message fields
    pub entries: ::protobuf::RepeatedField<Holding>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl HoldingContainer {
    pub fn new() -> HoldingContainer {
        ::std::default::Default::default()
    }

    // repeated .Holding entries = 1;

    pub fn clear_entries(&mut self) {
        self.entries.clear();
    }

    // Param is passed by value, moved
    pub fn set_entries(&mut self, v: ::protobuf::RepeatedField<Holding>) {
        self.entries = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entries(&mut self) -> &mut ::protobuf::RepeatedField<Holding> {
        &mut self.entries
    }

    // Take field
    pub fn take_entries(&mut self) -> ::protobuf::RepeatedField<Holding> {
        ::std::mem::replace(&mut self.entries, ::protobuf::RepeatedField::new())
    }

    pub fn get_entries(&self) -> &[Holding] {
        &self.entries
    }
}

impl ::protobuf::Message for HoldingContainer {
    fn is_initialized(&self) -> bool {
        for v in &self.entries {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entries)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entries {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HoldingContainer {
        HoldingContainer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Holding>>(
                    "entries",
                    |m: &HoldingContainer| { &m.entries },
                    |m: &mut HoldingContainer| { &mut m.entries },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HoldingContainer>(
                    "HoldingContainer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HoldingContainer {
        static mut instance: ::protobuf::lazy::Lazy<HoldingContainer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HoldingContainer,
        };
        unsafe {
            instance.get(HoldingContainer::new)
        }
    }
}

impl ::protobuf::Clear for HoldingContainer {
    fn clear(&mut self) {
        self.clear_entries();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HoldingContainer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HoldingContainer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rholding.proto\"\x9d\x01\n\x07Holding\x12\x0e\n\x02id\x18\x01\x20\x01\
    (\tR\x02id\x12\x14\n\x05label\x18\x02\x20\x01(\tR\x05label\x12\x20\n\x0b\
    description\x18\x03\x20\x01(\tR\x0bdescription\x12\x18\n\x07account\x18\
    \x04\x20\x01(\tR\x07account\x12\x14\n\x05asset\x18\x05\x20\x01(\tR\x05as\
    set\x12\x1a\n\x08quantity\x18\x06\x20\x01(\x12R\x08quantity\"6\n\x10Hold\
    ingContainer\x12\"\n\x07entries\x18\x01\x20\x03(\x0b2\x08.HoldingR\x07en\
    triesb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
