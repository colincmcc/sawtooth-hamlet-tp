// This file is generated by rust-protobuf 2.2.4. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct TransactionPayload {
    // message fields
    pub payload_type: TransactionPayload_PayloadType,
    pub create_account: ::protobuf::SingularPtrField<CreateAccount>,
    pub create_asset: ::protobuf::SingularPtrField<CreateAsset>,
    pub create_holding: ::protobuf::SingularPtrField<CreateHolding>,
    pub create_offer: ::protobuf::SingularPtrField<CreateOffer>,
    pub accept_offer: ::protobuf::SingularPtrField<AcceptOffer>,
    pub close_offer: ::protobuf::SingularPtrField<CloseOffer>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl TransactionPayload {
    pub fn new() -> TransactionPayload {
        ::std::default::Default::default()
    }

    // .TransactionPayload.PayloadType payload_type = 1;

    pub fn clear_payload_type(&mut self) {
        self.payload_type = TransactionPayload_PayloadType::TYPE_UNSET;
    }

    // Param is passed by value, moved
    pub fn set_payload_type(&mut self, v: TransactionPayload_PayloadType) {
        self.payload_type = v;
    }

    pub fn get_payload_type(&self) -> TransactionPayload_PayloadType {
        self.payload_type
    }

    // .CreateAccount create_account = 2;

    pub fn clear_create_account(&mut self) {
        self.create_account.clear();
    }

    pub fn has_create_account(&self) -> bool {
        self.create_account.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_account(&mut self, v: CreateAccount) {
        self.create_account = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_account(&mut self) -> &mut CreateAccount {
        if self.create_account.is_none() {
            self.create_account.set_default();
        }
        self.create_account.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_account(&mut self) -> CreateAccount {
        self.create_account.take().unwrap_or_else(|| CreateAccount::new())
    }

    pub fn get_create_account(&self) -> &CreateAccount {
        self.create_account.as_ref().unwrap_or_else(|| CreateAccount::default_instance())
    }

    // .CreateAsset create_asset = 3;

    pub fn clear_create_asset(&mut self) {
        self.create_asset.clear();
    }

    pub fn has_create_asset(&self) -> bool {
        self.create_asset.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_asset(&mut self, v: CreateAsset) {
        self.create_asset = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_asset(&mut self) -> &mut CreateAsset {
        if self.create_asset.is_none() {
            self.create_asset.set_default();
        }
        self.create_asset.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_asset(&mut self) -> CreateAsset {
        self.create_asset.take().unwrap_or_else(|| CreateAsset::new())
    }

    pub fn get_create_asset(&self) -> &CreateAsset {
        self.create_asset.as_ref().unwrap_or_else(|| CreateAsset::default_instance())
    }

    // .CreateHolding create_holding = 4;

    pub fn clear_create_holding(&mut self) {
        self.create_holding.clear();
    }

    pub fn has_create_holding(&self) -> bool {
        self.create_holding.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_holding(&mut self, v: CreateHolding) {
        self.create_holding = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_holding(&mut self) -> &mut CreateHolding {
        if self.create_holding.is_none() {
            self.create_holding.set_default();
        }
        self.create_holding.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_holding(&mut self) -> CreateHolding {
        self.create_holding.take().unwrap_or_else(|| CreateHolding::new())
    }

    pub fn get_create_holding(&self) -> &CreateHolding {
        self.create_holding.as_ref().unwrap_or_else(|| CreateHolding::default_instance())
    }

    // .CreateOffer create_offer = 5;

    pub fn clear_create_offer(&mut self) {
        self.create_offer.clear();
    }

    pub fn has_create_offer(&self) -> bool {
        self.create_offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_create_offer(&mut self, v: CreateOffer) {
        self.create_offer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_create_offer(&mut self) -> &mut CreateOffer {
        if self.create_offer.is_none() {
            self.create_offer.set_default();
        }
        self.create_offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_create_offer(&mut self) -> CreateOffer {
        self.create_offer.take().unwrap_or_else(|| CreateOffer::new())
    }

    pub fn get_create_offer(&self) -> &CreateOffer {
        self.create_offer.as_ref().unwrap_or_else(|| CreateOffer::default_instance())
    }

    // .AcceptOffer accept_offer = 10;

    pub fn clear_accept_offer(&mut self) {
        self.accept_offer.clear();
    }

    pub fn has_accept_offer(&self) -> bool {
        self.accept_offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_accept_offer(&mut self, v: AcceptOffer) {
        self.accept_offer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_accept_offer(&mut self) -> &mut AcceptOffer {
        if self.accept_offer.is_none() {
            self.accept_offer.set_default();
        }
        self.accept_offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_accept_offer(&mut self) -> AcceptOffer {
        self.accept_offer.take().unwrap_or_else(|| AcceptOffer::new())
    }

    pub fn get_accept_offer(&self) -> &AcceptOffer {
        self.accept_offer.as_ref().unwrap_or_else(|| AcceptOffer::default_instance())
    }

    // .CloseOffer close_offer = 11;

    pub fn clear_close_offer(&mut self) {
        self.close_offer.clear();
    }

    pub fn has_close_offer(&self) -> bool {
        self.close_offer.is_some()
    }

    // Param is passed by value, moved
    pub fn set_close_offer(&mut self, v: CloseOffer) {
        self.close_offer = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_close_offer(&mut self) -> &mut CloseOffer {
        if self.close_offer.is_none() {
            self.close_offer.set_default();
        }
        self.close_offer.as_mut().unwrap()
    }

    // Take field
    pub fn take_close_offer(&mut self) -> CloseOffer {
        self.close_offer.take().unwrap_or_else(|| CloseOffer::new())
    }

    pub fn get_close_offer(&self) -> &CloseOffer {
        self.close_offer.as_ref().unwrap_or_else(|| CloseOffer::default_instance())
    }
}

impl ::protobuf::Message for TransactionPayload {
    fn is_initialized(&self) -> bool {
        for v in &self.create_account {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_asset {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_holding {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.create_offer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.accept_offer {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.close_offer {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.payload_type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_account)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_asset)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_holding)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.create_offer)?;
                },
                10 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.accept_offer)?;
                },
                11 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.close_offer)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.payload_type != TransactionPayload_PayloadType::TYPE_UNSET {
            my_size += ::protobuf::rt::enum_size(1, self.payload_type);
        }
        if let Some(ref v) = self.create_account.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_asset.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_holding.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.create_offer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.accept_offer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.close_offer.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.payload_type != TransactionPayload_PayloadType::TYPE_UNSET {
            os.write_enum(1, self.payload_type.value())?;
        }
        if let Some(ref v) = self.create_account.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_asset.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_holding.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.create_offer.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.accept_offer.as_ref() {
            os.write_tag(10, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.close_offer.as_ref() {
            os.write_tag(11, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransactionPayload {
        TransactionPayload::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<TransactionPayload_PayloadType>>(
                    "payload_type",
                    |m: &TransactionPayload| { &m.payload_type },
                    |m: &mut TransactionPayload| { &mut m.payload_type },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateAccount>>(
                    "create_account",
                    |m: &TransactionPayload| { &m.create_account },
                    |m: &mut TransactionPayload| { &mut m.create_account },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateAsset>>(
                    "create_asset",
                    |m: &TransactionPayload| { &m.create_asset },
                    |m: &mut TransactionPayload| { &mut m.create_asset },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateHolding>>(
                    "create_holding",
                    |m: &TransactionPayload| { &m.create_holding },
                    |m: &mut TransactionPayload| { &mut m.create_holding },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CreateOffer>>(
                    "create_offer",
                    |m: &TransactionPayload| { &m.create_offer },
                    |m: &mut TransactionPayload| { &mut m.create_offer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AcceptOffer>>(
                    "accept_offer",
                    |m: &TransactionPayload| { &m.accept_offer },
                    |m: &mut TransactionPayload| { &mut m.accept_offer },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CloseOffer>>(
                    "close_offer",
                    |m: &TransactionPayload| { &m.close_offer },
                    |m: &mut TransactionPayload| { &mut m.close_offer },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransactionPayload>(
                    "TransactionPayload",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransactionPayload {
        static mut instance: ::protobuf::lazy::Lazy<TransactionPayload> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransactionPayload,
        };
        unsafe {
            instance.get(TransactionPayload::new)
        }
    }
}

impl ::protobuf::Clear for TransactionPayload {
    fn clear(&mut self) {
        self.clear_payload_type();
        self.clear_create_account();
        self.clear_create_asset();
        self.clear_create_holding();
        self.clear_create_offer();
        self.clear_accept_offer();
        self.clear_close_offer();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransactionPayload {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionPayload {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum TransactionPayload_PayloadType {
    TYPE_UNSET = 0,
    CREATE_ACCOUNT = 2,
    CREATE_ASSET = 3,
    CREATE_HOLDING = 4,
    CREATE_OFFER = 5,
    ACCEPT_OFFER = 10,
    CLOSE_OFFER = 11,
}

impl ::protobuf::ProtobufEnum for TransactionPayload_PayloadType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<TransactionPayload_PayloadType> {
        match value {
            0 => ::std::option::Option::Some(TransactionPayload_PayloadType::TYPE_UNSET),
            2 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_ACCOUNT),
            3 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_ASSET),
            4 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_HOLDING),
            5 => ::std::option::Option::Some(TransactionPayload_PayloadType::CREATE_OFFER),
            10 => ::std::option::Option::Some(TransactionPayload_PayloadType::ACCEPT_OFFER),
            11 => ::std::option::Option::Some(TransactionPayload_PayloadType::CLOSE_OFFER),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [TransactionPayload_PayloadType] = &[
            TransactionPayload_PayloadType::TYPE_UNSET,
            TransactionPayload_PayloadType::CREATE_ACCOUNT,
            TransactionPayload_PayloadType::CREATE_ASSET,
            TransactionPayload_PayloadType::CREATE_HOLDING,
            TransactionPayload_PayloadType::CREATE_OFFER,
            TransactionPayload_PayloadType::ACCEPT_OFFER,
            TransactionPayload_PayloadType::CLOSE_OFFER,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("TransactionPayload_PayloadType", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for TransactionPayload_PayloadType {
}

impl ::std::default::Default for TransactionPayload_PayloadType {
    fn default() -> Self {
        TransactionPayload_PayloadType::TYPE_UNSET
    }
}

impl ::protobuf::reflect::ProtobufValue for TransactionPayload_PayloadType {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAccount {
    // message fields
    pub label: ::protobuf::Chars,
    pub description: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateAccount {
    pub fn new() -> CreateAccount {
        ::std::default::Default::default()
    }

    // string label = 1;

    pub fn clear_label(&mut self) {
        ::protobuf::Clear::clear(&mut self.label);
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::Chars) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::protobuf::Chars {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.label, ::protobuf::Chars::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 2;

    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }
}

impl ::protobuf::Message for CreateAccount {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.label)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.label.is_empty() {
            os.write_string(1, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAccount {
        CreateAccount::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "label",
                    |m: &CreateAccount| { &m.label },
                    |m: &mut CreateAccount| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &CreateAccount| { &m.description },
                    |m: &mut CreateAccount| { &mut m.description },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAccount>(
                    "CreateAccount",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAccount {
        static mut instance: ::protobuf::lazy::Lazy<CreateAccount> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAccount,
        };
        unsafe {
            instance.get(CreateAccount::new)
        }
    }
}

impl ::protobuf::Clear for CreateAccount {
    fn clear(&mut self) {
        self.clear_label();
        self.clear_description();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAccount {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAccount {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateAsset {
    // message fields
    pub name: ::protobuf::Chars,
    pub description: ::protobuf::Chars,
    pub rules: ::protobuf::RepeatedField<super::rule::Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateAsset {
    pub fn new() -> CreateAsset {
        ::std::default::Default::default()
    }

    // string name = 1;

    pub fn clear_name(&mut self) {
        ::protobuf::Clear::clear(&mut self.name);
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::protobuf::Chars) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::protobuf::Chars {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.name, ::protobuf::Chars::new())
    }

    pub fn get_name(&self) -> &str {
        &self.name
    }

    // string description = 2;

    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // repeated .Rule rules = 3;

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<super::rule::Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<super::rule::Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<super::rule::Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    pub fn get_rules(&self) -> &[super::rule::Rule] {
        &self.rules
    }
}

impl ::protobuf::Message for CreateAsset {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                3 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.description);
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.description.is_empty() {
            os.write_string(2, &self.description)?;
        }
        for v in &self.rules {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateAsset {
        CreateAsset::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "name",
                    |m: &CreateAsset| { &m.name },
                    |m: &mut CreateAsset| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &CreateAsset| { &m.description },
                    |m: &mut CreateAsset| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rule::Rule>>(
                    "rules",
                    |m: &CreateAsset| { &m.rules },
                    |m: &mut CreateAsset| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateAsset>(
                    "CreateAsset",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateAsset {
        static mut instance: ::protobuf::lazy::Lazy<CreateAsset> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateAsset,
        };
        unsafe {
            instance.get(CreateAsset::new)
        }
    }
}

impl ::protobuf::Clear for CreateAsset {
    fn clear(&mut self) {
        self.clear_name();
        self.clear_description();
        self.clear_rules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateAsset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateAsset {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateHolding {
    // message fields
    pub id: ::protobuf::Chars,
    pub label: ::protobuf::Chars,
    pub description: ::protobuf::Chars,
    pub asset: ::protobuf::Chars,
    pub quantity: i64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateHolding {
    pub fn new() -> CreateHolding {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::Chars) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::protobuf::Chars {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.id, ::protobuf::Chars::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string label = 2;

    pub fn clear_label(&mut self) {
        ::protobuf::Clear::clear(&mut self.label);
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::Chars) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::protobuf::Chars {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.label, ::protobuf::Chars::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 3;

    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string asset = 4;

    pub fn clear_asset(&mut self) {
        ::protobuf::Clear::clear(&mut self.asset);
    }

    // Param is passed by value, moved
    pub fn set_asset(&mut self, v: ::protobuf::Chars) {
        self.asset = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_asset(&mut self) -> &mut ::protobuf::Chars {
        &mut self.asset
    }

    // Take field
    pub fn take_asset(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.asset, ::protobuf::Chars::new())
    }

    pub fn get_asset(&self) -> &str {
        &self.asset
    }

    // sint64 quantity = 5;

    pub fn clear_quantity(&mut self) {
        self.quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_quantity(&mut self, v: i64) {
        self.quantity = v;
    }

    pub fn get_quantity(&self) -> i64 {
        self.quantity
    }
}

impl ::protobuf::Message for CreateHolding {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.asset)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.quantity = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.asset.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.asset);
        }
        if self.quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.quantity);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.asset.is_empty() {
            os.write_string(4, &self.asset)?;
        }
        if self.quantity != 0 {
            os.write_sint64(5, self.quantity)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateHolding {
        CreateHolding::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "id",
                    |m: &CreateHolding| { &m.id },
                    |m: &mut CreateHolding| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "label",
                    |m: &CreateHolding| { &m.label },
                    |m: &mut CreateHolding| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &CreateHolding| { &m.description },
                    |m: &mut CreateHolding| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "asset",
                    |m: &CreateHolding| { &m.asset },
                    |m: &mut CreateHolding| { &mut m.asset },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "quantity",
                    |m: &CreateHolding| { &m.quantity },
                    |m: &mut CreateHolding| { &mut m.quantity },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateHolding>(
                    "CreateHolding",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateHolding {
        static mut instance: ::protobuf::lazy::Lazy<CreateHolding> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateHolding,
        };
        unsafe {
            instance.get(CreateHolding::new)
        }
    }
}

impl ::protobuf::Clear for CreateHolding {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_description();
        self.clear_asset();
        self.clear_quantity();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateHolding {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateHolding {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CreateOffer {
    // message fields
    pub id: ::protobuf::Chars,
    pub label: ::protobuf::Chars,
    pub description: ::protobuf::Chars,
    pub source: ::protobuf::Chars,
    pub source_quantity: i64,
    pub target: ::protobuf::Chars,
    pub target_quantity: i64,
    pub rules: ::protobuf::RepeatedField<super::rule::Rule>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CreateOffer {
    pub fn new() -> CreateOffer {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::Chars) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::protobuf::Chars {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.id, ::protobuf::Chars::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string label = 2;

    pub fn clear_label(&mut self) {
        ::protobuf::Clear::clear(&mut self.label);
    }

    // Param is passed by value, moved
    pub fn set_label(&mut self, v: ::protobuf::Chars) {
        self.label = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_label(&mut self) -> &mut ::protobuf::Chars {
        &mut self.label
    }

    // Take field
    pub fn take_label(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.label, ::protobuf::Chars::new())
    }

    pub fn get_label(&self) -> &str {
        &self.label
    }

    // string description = 3;

    pub fn clear_description(&mut self) {
        ::protobuf::Clear::clear(&mut self.description);
    }

    // Param is passed by value, moved
    pub fn set_description(&mut self, v: ::protobuf::Chars) {
        self.description = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_description(&mut self) -> &mut ::protobuf::Chars {
        &mut self.description
    }

    // Take field
    pub fn take_description(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.description, ::protobuf::Chars::new())
    }

    pub fn get_description(&self) -> &str {
        &self.description
    }

    // string source = 4;

    pub fn clear_source(&mut self) {
        ::protobuf::Clear::clear(&mut self.source);
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::protobuf::Chars) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::protobuf::Chars {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.source, ::protobuf::Chars::new())
    }

    pub fn get_source(&self) -> &str {
        &self.source
    }

    // sint64 source_quantity = 5;

    pub fn clear_source_quantity(&mut self) {
        self.source_quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_source_quantity(&mut self, v: i64) {
        self.source_quantity = v;
    }

    pub fn get_source_quantity(&self) -> i64 {
        self.source_quantity
    }

    // string target = 6;

    pub fn clear_target(&mut self) {
        ::protobuf::Clear::clear(&mut self.target);
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::protobuf::Chars) {
        self.target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut ::protobuf::Chars {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.target, ::protobuf::Chars::new())
    }

    pub fn get_target(&self) -> &str {
        &self.target
    }

    // sint64 target_quantity = 7;

    pub fn clear_target_quantity(&mut self) {
        self.target_quantity = 0;
    }

    // Param is passed by value, moved
    pub fn set_target_quantity(&mut self, v: i64) {
        self.target_quantity = v;
    }

    pub fn get_target_quantity(&self) -> i64 {
        self.target_quantity
    }

    // repeated .Rule rules = 8;

    pub fn clear_rules(&mut self) {
        self.rules.clear();
    }

    // Param is passed by value, moved
    pub fn set_rules(&mut self, v: ::protobuf::RepeatedField<super::rule::Rule>) {
        self.rules = v;
    }

    // Mutable pointer to the field.
    pub fn mut_rules(&mut self) -> &mut ::protobuf::RepeatedField<super::rule::Rule> {
        &mut self.rules
    }

    // Take field
    pub fn take_rules(&mut self) -> ::protobuf::RepeatedField<super::rule::Rule> {
        ::std::mem::replace(&mut self.rules, ::protobuf::RepeatedField::new())
    }

    pub fn get_rules(&self) -> &[super::rule::Rule] {
        &self.rules
    }
}

impl ::protobuf::Message for CreateOffer {
    fn is_initialized(&self) -> bool {
        for v in &self.rules {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.label)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.description)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.source)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.source_quantity = tmp;
                },
                6 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.target)?;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_sint64()?;
                    self.target_quantity = tmp;
                },
                8 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.rules)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.label.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.label);
        }
        if !self.description.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.description);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.source);
        }
        if self.source_quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(5, self.source_quantity);
        }
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(6, &self.target);
        }
        if self.target_quantity != 0 {
            my_size += ::protobuf::rt::value_varint_zigzag_size(7, self.target_quantity);
        }
        for value in &self.rules {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.label.is_empty() {
            os.write_string(2, &self.label)?;
        }
        if !self.description.is_empty() {
            os.write_string(3, &self.description)?;
        }
        if !self.source.is_empty() {
            os.write_string(4, &self.source)?;
        }
        if self.source_quantity != 0 {
            os.write_sint64(5, self.source_quantity)?;
        }
        if !self.target.is_empty() {
            os.write_string(6, &self.target)?;
        }
        if self.target_quantity != 0 {
            os.write_sint64(7, self.target_quantity)?;
        }
        for v in &self.rules {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CreateOffer {
        CreateOffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "id",
                    |m: &CreateOffer| { &m.id },
                    |m: &mut CreateOffer| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "label",
                    |m: &CreateOffer| { &m.label },
                    |m: &mut CreateOffer| { &mut m.label },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "description",
                    |m: &CreateOffer| { &m.description },
                    |m: &mut CreateOffer| { &mut m.description },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "source",
                    |m: &CreateOffer| { &m.source },
                    |m: &mut CreateOffer| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "source_quantity",
                    |m: &CreateOffer| { &m.source_quantity },
                    |m: &mut CreateOffer| { &mut m.source_quantity },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "target",
                    |m: &CreateOffer| { &m.target },
                    |m: &mut CreateOffer| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeSint64>(
                    "target_quantity",
                    |m: &CreateOffer| { &m.target_quantity },
                    |m: &mut CreateOffer| { &mut m.target_quantity },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<super::rule::Rule>>(
                    "rules",
                    |m: &CreateOffer| { &m.rules },
                    |m: &mut CreateOffer| { &mut m.rules },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CreateOffer>(
                    "CreateOffer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CreateOffer {
        static mut instance: ::protobuf::lazy::Lazy<CreateOffer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CreateOffer,
        };
        unsafe {
            instance.get(CreateOffer::new)
        }
    }
}

impl ::protobuf::Clear for CreateOffer {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_label();
        self.clear_description();
        self.clear_source();
        self.clear_source_quantity();
        self.clear_target();
        self.clear_target_quantity();
        self.clear_rules();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CreateOffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CreateOffer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AcceptOffer {
    // message fields
    pub id: ::protobuf::Chars,
    pub source: ::protobuf::Chars,
    pub target: ::protobuf::Chars,
    pub count: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl AcceptOffer {
    pub fn new() -> AcceptOffer {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::Chars) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::protobuf::Chars {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.id, ::protobuf::Chars::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }

    // string source = 2;

    pub fn clear_source(&mut self) {
        ::protobuf::Clear::clear(&mut self.source);
    }

    // Param is passed by value, moved
    pub fn set_source(&mut self, v: ::protobuf::Chars) {
        self.source = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_source(&mut self) -> &mut ::protobuf::Chars {
        &mut self.source
    }

    // Take field
    pub fn take_source(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.source, ::protobuf::Chars::new())
    }

    pub fn get_source(&self) -> &str {
        &self.source
    }

    // string target = 3;

    pub fn clear_target(&mut self) {
        ::protobuf::Clear::clear(&mut self.target);
    }

    // Param is passed by value, moved
    pub fn set_target(&mut self, v: ::protobuf::Chars) {
        self.target = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_target(&mut self) -> &mut ::protobuf::Chars {
        &mut self.target
    }

    // Take field
    pub fn take_target(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.target, ::protobuf::Chars::new())
    }

    pub fn get_target(&self) -> &str {
        &self.target
    }

    // uint64 count = 4;

    pub fn clear_count(&mut self) {
        self.count = 0;
    }

    // Param is passed by value, moved
    pub fn set_count(&mut self, v: u64) {
        self.count = v;
    }

    pub fn get_count(&self) -> u64 {
        self.count
    }
}

impl ::protobuf::Message for AcceptOffer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.id)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.source)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.target)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.count = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        if !self.source.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.source);
        }
        if !self.target.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.target);
        }
        if self.count != 0 {
            my_size += ::protobuf::rt::value_size(4, self.count, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        if !self.source.is_empty() {
            os.write_string(2, &self.source)?;
        }
        if !self.target.is_empty() {
            os.write_string(3, &self.target)?;
        }
        if self.count != 0 {
            os.write_uint64(4, self.count)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AcceptOffer {
        AcceptOffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "id",
                    |m: &AcceptOffer| { &m.id },
                    |m: &mut AcceptOffer| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "source",
                    |m: &AcceptOffer| { &m.source },
                    |m: &mut AcceptOffer| { &mut m.source },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "target",
                    |m: &AcceptOffer| { &m.target },
                    |m: &mut AcceptOffer| { &mut m.target },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "count",
                    |m: &AcceptOffer| { &m.count },
                    |m: &mut AcceptOffer| { &mut m.count },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AcceptOffer>(
                    "AcceptOffer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AcceptOffer {
        static mut instance: ::protobuf::lazy::Lazy<AcceptOffer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AcceptOffer,
        };
        unsafe {
            instance.get(AcceptOffer::new)
        }
    }
}

impl ::protobuf::Clear for AcceptOffer {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_source();
        self.clear_target();
        self.clear_count();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AcceptOffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AcceptOffer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CloseOffer {
    // message fields
    pub id: ::protobuf::Chars,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl CloseOffer {
    pub fn new() -> CloseOffer {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        ::protobuf::Clear::clear(&mut self.id);
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::protobuf::Chars) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::protobuf::Chars {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::protobuf::Chars {
        ::std::mem::replace(&mut self.id, ::protobuf::Chars::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }
}

impl ::protobuf::Message for CloseOffer {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_carllerche_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CloseOffer {
        CloseOffer::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeCarllercheChars>(
                    "id",
                    |m: &CloseOffer| { &m.id },
                    |m: &mut CloseOffer| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CloseOffer>(
                    "CloseOffer",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CloseOffer {
        static mut instance: ::protobuf::lazy::Lazy<CloseOffer> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CloseOffer,
        };
        unsafe {
            instance.get(CloseOffer::new)
        }
    }
}

impl ::protobuf::Clear for CloseOffer {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CloseOffer {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CloseOffer {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpayload.proto\x1a\nrule.proto\"\x96\x04\n\x12TransactionPayload\x12B\
    \n\x0cpayload_type\x18\x01\x20\x01(\x0e2\x1f.TransactionPayload.PayloadT\
    ypeR\x0bpayloadType\x125\n\x0ecreate_account\x18\x02\x20\x01(\x0b2\x0e.C\
    reateAccountR\rcreateAccount\x12/\n\x0ccreate_asset\x18\x03\x20\x01(\x0b\
    2\x0c.CreateAssetR\x0bcreateAsset\x125\n\x0ecreate_holding\x18\x04\x20\
    \x01(\x0b2\x0e.CreateHoldingR\rcreateHolding\x12/\n\x0ccreate_offer\x18\
    \x05\x20\x01(\x0b2\x0c.CreateOfferR\x0bcreateOffer\x12/\n\x0caccept_offe\
    r\x18\n\x20\x01(\x0b2\x0c.AcceptOfferR\x0bacceptOffer\x12,\n\x0bclose_of\
    fer\x18\x0b\x20\x01(\x0b2\x0b.CloseOfferR\ncloseOffer\"\x8c\x01\n\x0bPay\
    loadType\x12\x0e\n\nTYPE_UNSET\x10\0\x12\x12\n\x0eCREATE_ACCOUNT\x10\x02\
    \x12\x10\n\x0cCREATE_ASSET\x10\x03\x12\x12\n\x0eCREATE_HOLDING\x10\x04\
    \x12\x10\n\x0cCREATE_OFFER\x10\x05\x12\x10\n\x0cACCEPT_OFFER\x10\n\x12\
    \x0f\n\x0bCLOSE_OFFER\x10\x0b\"G\n\rCreateAccount\x12\x14\n\x05label\x18\
    \x01\x20\x01(\tR\x05label\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\
    \x0bdescription\"`\n\x0bCreateAsset\x12\x12\n\x04name\x18\x01\x20\x01(\t\
    R\x04name\x12\x20\n\x0bdescription\x18\x02\x20\x01(\tR\x0bdescription\
    \x12\x1b\n\x05rules\x18\x03\x20\x03(\x0b2\x05.RuleR\x05rules\"\x89\x01\n\
    \rCreateHolding\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05l\
    abel\x18\x02\x20\x01(\tR\x05label\x12\x20\n\x0bdescription\x18\x03\x20\
    \x01(\tR\x0bdescription\x12\x14\n\x05asset\x18\x04\x20\x01(\tR\x05asset\
    \x12\x1a\n\x08quantity\x18\x05\x20\x01(\x12R\x08quantity\"\xf4\x01\n\x0b\
    CreateOffer\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02id\x12\x14\n\x05label\
    \x18\x02\x20\x01(\tR\x05label\x12\x20\n\x0bdescription\x18\x03\x20\x01(\
    \tR\x0bdescription\x12\x16\n\x06source\x18\x04\x20\x01(\tR\x06source\x12\
    '\n\x0fsource_quantity\x18\x05\x20\x01(\x12R\x0esourceQuantity\x12\x16\n\
    \x06target\x18\x06\x20\x01(\tR\x06target\x12'\n\x0ftarget_quantity\x18\
    \x07\x20\x01(\x12R\x0etargetQuantity\x12\x1b\n\x05rules\x18\x08\x20\x03(\
    \x0b2\x05.RuleR\x05rules\"c\n\x0bAcceptOffer\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02id\x12\x16\n\x06source\x18\x02\x20\x01(\tR\x06source\x12\x16\
    \n\x06target\x18\x03\x20\x01(\tR\x06target\x12\x14\n\x05count\x18\x04\
    \x20\x01(\x04R\x05count\"\x1c\n\nCloseOffer\x12\x0e\n\x02id\x18\x01\x20\
    \x01(\tR\x02idb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
